{{> header }}

<div class="vision-classifier">
    <h2 class="vision-classifier__title">Create New Vision Classifier</h2>
    
    <div class="vision-classifier__form">
        <div class="form-group">
            <label for="classifierName">Classifier Name</label>
            <input type="text" class="form-control" id="classifierName" placeholder="Enter a name for your classifier">
        </div>
        
        <div class="form-group">
            <label for="labelInput">Add Labels</label>
            <div class="input-group">
                <input type="text" class="form-control" id="labelInput" placeholder="Enter a label (e.g., cat, dog)">
                <div class="input-group-append">
                    <button class="btn btn-primary" id="addLabelButton">Add Label</button>
                </div>
            </div>
            <small class="form-text text-muted">Add at least 2 labels (categories) for your classifier</small>
        </div>
        
        <!-- Instructions for users -->
        <div class="alert alert-info">
            <strong>Tip:</strong> Click on a label name to add image examples. Each label needs at least 10 images.
        </div>
        
        <div class="labels-container">
            <ul class="list-group" id="labelList"></ul>
        </div>
        
        <div class="form-group mt-4">
            <button class="btn btn-success btn-lg" id="trainButton">Train Classifier</button>
        </div>
    </div>
    
    <!-- Label Modal -->
    <div class="modal fade" id="labelModal" tabindex="-1" role="dialog" aria-labelledby="labelModalLabel">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="labelModalLabel">Add Examples for Label: <span id="currentLabel"></span></h4>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-12">
                            <div class="form-group">
                                <label for="imageUpload">Upload Image</label>
                                <input type="file" class="form-control-file" id="imageUpload" accept="image/*">
                            </div>
                            <button type="button" class="btn btn-primary" id="addExampleButton">Add Example</button>
                            <hr>
                            <div id="exampleImages" class="row"></div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal" id="closeLabelModal">Close</button>
                    <button type="button" class="btn btn-primary" data-dismiss="modal" id="saveExamplesButton">Save Examples</button>
                    <button type="button" class="btn btn-danger" data-dismiss="modal" id="removeLabelButton">Remove Label</button>
                </div>
            </div>
        </div>
    </div>
</div>

{{> footer }}

<script>
  $(document).ready(function() {
    // Initialize global variables
    window.labelListItems = [];
    window.examples = {};
    window.classifierName = '';
    
    // Initialize modals
    $('.modal').modal({
      backdrop: 'static',
      keyboard: false,
      show: false
    });
    
    // Add label button click handler
    $('#addLabelButton').click(function(e) {
      e.preventDefault();
      var labelInput = $('#labelInput').val();
      if(labelInput != null && labelInput.length > 0) {
        addLabelItem(labelInput);
        // Clear the input field after adding
        $('#labelInput').val('');
      }
      return false;
    });
    
    // Remove label button click handler
    $('#removeLabelButton').click(function(e) {
      e.preventDefault();
      var label = $('#currentLabel').text();
      removeLabel(label);
      $('#labelModal').modal('hide');
      return false;
    });
    
    // Save examples button click handler
    $('#saveExamplesButton').click(function(e) {
      e.preventDefault();
      $('#labelModal').modal('hide');
      return false;
    });
    
    // Add example button click handler
    $('#addExampleButton').click(function(e) {
      e.preventDefault();
      var fileInput = document.getElementById('imageUpload');
      if(fileInput.files.length > 0) {
        var file = fileInput.files[0];
        var reader = new FileReader();
        reader.onload = function(e) {
          addExampleItem(e.target.result);
          fileInput.value = '';
        };
        reader.readAsDataURL(file);
      }
      return false;
    });
    
    // Train button click handler
    $('#trainButton').click(function(e) {
      e.preventDefault();
      window.classifierName = $('#classifierName').val();
      if(window.classifierName == null || window.classifierName.length == 0) {
        alert('Please enter a classifier name');
        return;
      }
      
      if(window.labelListItems.length < 2) {
        alert('Please add at least 2 labels');
        return;
      }
      
      var error = false;
      for(var idx = 0; idx < window.labelListItems.length; idx++) {
        var label = window.labelListItems[idx];
        if(window.examples[label].length < 10) {
          alert('10 or more examples required for each label');
          error = true;
          break;
        }
      }
      
      if(error == true) {
        return;
      }
      
      // Disable the train button and show progress
      $('#trainButton').prop('disabled', true);
      $('#trainButton').text('Preparing upload...');
      
      // Generate a unique session ID for this upload
      const sessionId = 'upload_' + Date.now() + '_' + Math.random().toString(36).substring(2, 15);
      
      // Prepare data for chunked upload
      const name = window.classifierName;
      const labels = window.labelListItems;
      
      // Count total chunks to send
      let totalChunks = 0;
      let chunkMap = new Map();
      
      // Calculate chunks per label (each image is a chunk)
      labels.forEach(label => {
        const images = window.examples[label] || [];
        totalChunks += images.length;
        chunkMap.set(label, images.length);
      });
      
      if(totalChunks === 0) {
        alert('No images to upload');
        $('#trainButton').prop('disabled', false);
        $('#trainButton').text('Train classifier');
        return;
      }
      
      $('#trainButton').text(`Uploading... (0/${totalChunks})`);
      
      // Track upload progress
      let uploadedChunks = 0;
      let lastClassifierId = null;
      
      // Function to upload a single image
      function uploadImage(label, imageIndex, image) {
        // Extract base64 data
        const imageData = image.split(',')[1];
        
        // Prepare chunk data
        const chunkData = {
          name: name,
          sessionId: sessionId,
          chunkIndex: uploadedChunks,
          totalChunks: totalChunks,
          label: label,
          data: imageData
        };
        
        // Send the chunk
        $.ajax({
          url: '/classify/image/upload-chunk',
          type: 'POST',
          dataType: 'json',
          contentType: "application/json; charset=utf-8",
          data: JSON.stringify(chunkData),
          success: function(data) {
            uploadedChunks++;
            
            // Update progress
            $('#trainButton').text(`Uploading... (${uploadedChunks}/${totalChunks})`);
            
            // If this is the last response with a classifier_id, save it
            if(data.classifier_id) {
              lastClassifierId = data.classifier_id;
            }
            
            // If all chunks are uploaded, redirect to the classifier page
            if(uploadedChunks === totalChunks) {
              if(lastClassifierId) {
                window.localStorage.setItem('selectedClassifier', lastClassifierId);
                window.location.replace('/classify/vision/classifiers');
              } else {
                $('#trainButton').text('Upload complete, processing...');
              }
            }
          },
          error: function(xhr, status, error) {
            console.error(`Error uploading image ${imageIndex} for label ${label}:`, error);
            alert(`Error uploading image: ${(xhr.responseJSON ? xhr.responseJSON.error : error)}`);
            $('#trainButton').prop('disabled', false);
            $('#trainButton').text('Train classifier');
          }
        });
      }
      
      // Start uploading images for each label
      labels.forEach(label => {
        const images = window.examples[label] || [];
        images.forEach((image, index) => {
          // Add a small delay between uploads to prevent overwhelming the server
          setTimeout(() => {
            uploadImage(label, index, image);
          }, index * 100); // 100ms delay between uploads
        });
      });
    });
    
    // Function to add a label item to the list
    function addLabelItem(label) {
      // Check if label already exists
      if(window.labelListItems.indexOf(label) >= 0) {
        alert('Label already exists');
        return;
      }
      
      var listItem = document.createElement('li');
      listItem.className = "list-group-item";
      listItem.id = `label_item_${label}`;
      listItem.style.cursor = "pointer"; // Make cursor a pointer to indicate clickability
      
      // Add main label text
      listItem.append(`${label} `);
      
      // Add badge
      var span = document.createElement('span');
      span.className = "badge";
      span.id = `label_badge_${label}`;
      span.innerHTML = 0;
      listItem.append(span);
      
      // Add click indicator text
      var clickIndicator = document.createElement('div');
      clickIndicator.style.fontSize = "12px";
      clickIndicator.style.color = "#666";
      clickIndicator.style.marginTop = "5px";
      clickIndicator.innerHTML = "Click to add images";
      listItem.append(clickIndicator);
      
      // Add click event listener
      listItem.addEventListener('click', function(labelName) {
        return function() {
          console.log("label clicked: " + labelName);
          showLabelModal(labelName);
        }
      }(label));
      
      $('#labelList').append(listItem);
      window.labelListItems.push(label);
      
      if(window.examples === undefined) {
        window.examples = {};
      }
      window.examples[label] = [];
    }
    
    // Function to remove a label
    function removeLabel(label) {
      var index = window.labelListItems.indexOf(label);
      if(index >= 0) {
        window.labelListItems.splice(index, 1);
        delete window.examples[label];
        $(`#label_item_${label}`).remove();
      }
    }
    
    // Function to show the label modal
    function showLabelModal(label) {
      $('#currentLabel').text(label);
      $('#exampleImages').empty();
      
      // Load existing examples
      if(window.examples[label]) {
        window.examples[label].forEach(function(example) {
          addExampleItem(example);
        });
      }
      
      $('#labelModal').modal('show');
    }
    
    // Function to add an example item
    function addExampleItem(example) {
      var label = $('#currentLabel').text();
      
      // Create container for the example
      var container = document.createElement('div');
      container.className = "col-md-3 mb-3";
      
      // Create image element
      var img = document.createElement('img');
      img.src = example;
      img.className = "img-fluid";
      img.style.maxHeight = "150px";
      container.appendChild(img);
      
      // Create remove button
      var removeBtn = document.createElement('button');
      removeBtn.className = "btn btn-sm btn-danger mt-1";
      removeBtn.innerHTML = "Remove";
      removeBtn.addEventListener('click', function() {
        // Remove from DOM
        container.remove();
        
        // Remove from examples array
        var index = window.examples[label].indexOf(example);
        if(index >= 0) {
          window.examples[label].splice(index, 1);
          updateExampleCount(label);
        }
      });
      container.appendChild(removeBtn);
      
      // Add to DOM
      $('#exampleImages').append(container);
      
      // Add to examples array if not already there
      if(window.examples[label].indexOf(example) < 0) {
        window.examples[label].push(example);
        updateExampleCount(label);
      }
    }
    
    // Function to update the example count badge
    function updateExampleCount(label) {
      var count = window.examples[label].length;
      $(`#label_badge_${label}`).text(count);
    }
  });
</script>
