{{!-- Text Classifier Creation Page --}}
<div class="classifier-page">
  <div class="classifier-page__header">
    <h1>Create Text Classifier</h1>
    <p class="classifier-page__description">Train a custom text classifier by adding examples for each category.</p>
  </div>

  <div class="classifier-form">
    {{!-- Classifier Name Section --}}
    <div class="classifier-form__section">
      <label class="form-label" for="classifier-name">Classifier Name</label>
      <input type="text" 
             id="classifier-name" 
             class="form-input" 
             placeholder="Enter a descriptive name (no spaces)"
             autocomplete="off">
      <div class="form-help">Give your classifier a descriptive name to identify it later</div>
    </div>

    {{!-- Training Data Section --}}
    <div class="classifier-form__section">
      <div class="training-data-header">
        <h2>Training Data</h2>
        <div class="training-data-actions">
          <button type="button" class="btn btn-outline-primary btn-sm" id="add-row">
            <i class="fas fa-plus"></i> Add Row
          </button>
          <button type="button" class="btn btn-outline-primary btn-sm" id="add-category">
            <i class="fas fa-columns"></i> Add Category
          </button>
        </div>
      </div>

      <div class="training-data">
        <div class="training-data__categories" id="categories-header">
          {{!-- Category headers will be added here --}}
        </div>
        
        <div class="training-data__rows" id="training-rows">
          {{!-- Training rows will be added here --}}
        </div>

        <div class="training-data__summary">
          <span id="examples-count">0 examples</span>
          <span id="categories-count">0 categories</span>
        </div>
      </div>
    </div>

    {{!-- Training Button --}}
    <div class="classifier-form__actions">
      <button type="button" class="btn btn-primary btn-train" id="train-classifier" disabled>
        <i class="fas fa-cog"></i> Train Classifier
      </button>
    </div>
  </div>
</div>

{{!-- Category Header Template --}}
<template id="category-header-template">
  <div class="category-header">
    <input type="text" class="category-header__input form-input" placeholder="Category name">
    <button type="button" class="btn btn-icon category-header__remove">
      <i class="fas fa-times"></i>
    </button>
  </div>
</template>

{{!-- Training Row Template --}}
<template id="training-row-template">
  <div class="training-row">
    {{!-- Example cells will be added dynamically based on categories --}}
  </div>
</template>

{{!-- Training Cell Template --}}
<template id="training-cell-template">
  <div class="training-cell">
    <input type="text" class="training-cell__input form-input" placeholder="Enter example text">
  </div>
</template>

{{!-- Scripts --}}
<script>
document.addEventListener('DOMContentLoaded', () => {
  const classifierName = document.getElementById('classifier-name');
  const addRowBtn = document.getElementById('add-row');
  const addCategoryBtn = document.getElementById('add-category');
  const trainBtn = document.getElementById('train-classifier');
  const categoriesHeader = document.getElementById('categories-header');
  const trainingRows = document.getElementById('training-rows');
  const examplesCount = document.getElementById('examples-count');
  const categoriesCount = document.getElementById('categories-count');

  // Templates
  const categoryHeaderTemplate = document.getElementById('category-header-template');
  const trainingRowTemplate = document.getElementById('training-row-template');
  const trainingCellTemplate = document.getElementById('training-cell-template');

  // Add category handler
  addCategoryBtn.addEventListener('click', () => {
    // Add category header
    const headerElement = categoryHeaderTemplate.content.cloneNode(true);
    categoriesHeader.appendChild(headerElement);

    // Add cell to each existing row
    const rows = trainingRows.querySelectorAll('.training-row');
    rows.forEach(row => {
      const cell = trainingCellTemplate.content.cloneNode(true);
      row.appendChild(cell);
    });

    updateCounts();
    updateTrainButtonState();
  });

  // Add row handler
  addRowBtn.addEventListener('click', () => {
    const rowElement = trainingRowTemplate.content.cloneNode(true);
    const row = rowElement.querySelector('.training-row');
    
    // Add cells for each category
    const categoryCount = categoriesHeader.children.length;
    for (let i = 0; i < categoryCount; i++) {
      const cell = trainingCellTemplate.content.cloneNode(true);
      row.appendChild(cell);
    }
    
    trainingRows.appendChild(row);
    updateCounts();
    updateTrainButtonState();
  });

  // Remove category handler
  categoriesHeader.addEventListener('click', (e) => {
    if (!e.target.closest('.category-header__remove')) return;
    
    const header = e.target.closest('.category-header');
    const index = Array.from(categoriesHeader.children).indexOf(header);
    
    // Remove header
    header.remove();
    
    // Remove corresponding cell from each row
    const rows = trainingRows.querySelectorAll('.training-row');
    rows.forEach(row => {
      row.children[index].remove();
    });

    updateCounts();
    updateTrainButtonState();
  });

  // Update counts
  function updateCounts() {
    const categories = categoriesHeader.querySelectorAll('.category-header').length;
    const rows = trainingRows.querySelectorAll('.training-row').length;
    const examples = categories * rows;
    
    categoriesCount.textContent = `${categories} ${categories === 1 ? 'category' : 'categories'}`;
    examplesCount.textContent = `${examples} ${examples === 1 ? 'example' : 'examples'}`;
  }

  // Enable/disable train button based on validation
  function updateTrainButtonState() {
    const hasName = classifierName.value.trim().length > 0;
    const categories = categoriesHeader.querySelectorAll('.category-header');
    const hasValidCategories = Array.from(categories).every(category => {
      const name = category.querySelector('.category-header__input').value.trim();
      return name.length > 0;
    });
    
    const rows = trainingRows.querySelectorAll('.training-row');
    const hasValidExamples = rows.length > 0 && Array.from(rows).every(row => {
      return Array.from(row.querySelectorAll('.training-cell__input')).every(input => 
        input.value.trim().length > 0
      );
    });
    
    trainBtn.disabled = !hasName || categories.length < 2 || !hasValidCategories || !hasValidExamples;
  }

  // Update train button state on input changes
  document.addEventListener('input', (e) => {
    if (e.target.matches('.form-input')) {
      updateTrainButtonState();
    }
  });

  // Initialize with 2 categories and 1 row
  addCategoryBtn.click();
  addCategoryBtn.click();
  addRowBtn.click();
});
</script>

{{> footer }}
